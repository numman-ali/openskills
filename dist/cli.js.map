{"version":3,"sources":["../src/cli.ts","../src/utils/skills.ts","../src/utils/dirs.ts","../src/utils/yaml.ts","../src/commands/list.ts","../src/commands/install.ts","../src/commands/load.ts","../src/commands/remove.ts"],"sourcesContent":["#!/usr/bin/env node\n\nimport { Command } from 'commander';\nimport { listSkills } from './commands/list.js';\nimport { installSkill } from './commands/install.js';\nimport { loadSkill } from './commands/load.js';\nimport { removeSkill } from './commands/remove.js';\n\nconst program = new Command();\n\nprogram\n  .name('openskills')\n  .description('Universal skills loader for AI coding agents')\n  .version('1.0.0');\n\nprogram\n  .command('list')\n  .description('List all installed skills')\n  .action(listSkills);\n\nprogram\n  .command('install <source>')\n  .description('Install skill from GitHub or Git URL')\n  .option('-p, --project', 'Install to project .claude/skills/ (default: global ~/.claude/skills/)')\n  .action(installSkill);\n\nprogram\n  .command('load <skill-name>')\n  .description('Load skill to stdout (for AI agents)')\n  .action(loadSkill);\n\nprogram\n  .command('remove <skill-name>')\n  .alias('rm')\n  .description('Remove installed skill')\n  .action(removeSkill);\n\nprogram.parse();\n","import { readFileSync, readdirSync, existsSync } from 'fs';\nimport { join } from 'path';\nimport { getSearchDirs } from './dirs.js';\nimport { extractYamlField } from './yaml.js';\nimport type { Skill, SkillLocation } from '../types.js';\n\n/**\n * Find all installed skills across directories\n */\nexport function findAllSkills(): Skill[] {\n  const skills: Skill[] = [];\n  const dirs = getSearchDirs();\n\n  for (const dir of dirs) {\n    if (!existsSync(dir)) continue;\n\n    const entries = readdirSync(dir, { withFileTypes: true });\n\n    for (const entry of entries) {\n      if (entry.isDirectory()) {\n        const skillPath = join(dir, entry.name, 'SKILL.md');\n        if (existsSync(skillPath)) {\n          const content = readFileSync(skillPath, 'utf-8');\n          const isProjectLocal = dir === join(process.cwd(), '.claude/skills');\n\n          skills.push({\n            name: entry.name,\n            description: extractYamlField(content, 'description'),\n            location: isProjectLocal ? 'project' : 'global',\n            path: join(dir, entry.name),\n          });\n        }\n      }\n    }\n  }\n\n  return skills;\n}\n\n/**\n * Find specific skill by name\n */\nexport function findSkill(skillName: string): SkillLocation | null {\n  const dirs = getSearchDirs();\n\n  for (const dir of dirs) {\n    const skillPath = join(dir, skillName, 'SKILL.md');\n    if (existsSync(skillPath)) {\n      return {\n        path: skillPath,\n        baseDir: join(dir, skillName),\n        source: dir,\n      };\n    }\n  }\n\n  return null;\n}\n","import { join } from 'path';\nimport { homedir } from 'os';\n\n/**\n * Get skills directory path\n */\nexport function getSkillsDir(projectLocal: boolean = false): string {\n  return projectLocal\n    ? join(process.cwd(), '.claude/skills')\n    : join(homedir(), '.claude/skills');\n}\n\n/**\n * Get all searchable skill directories in priority order\n */\nexport function getSearchDirs(): string[] {\n  return [\n    join(process.cwd(), '.claude/skills'),  // Project-local first\n    join(homedir(), '.claude/skills'),       // Global second\n  ];\n}\n","/**\n * Extract field from YAML frontmatter\n */\nexport function extractYamlField(content: string, field: string): string {\n  const match = content.match(new RegExp(`^${field}:\\\\s*(.+)$`, 'm'));\n  return match ? match[1].trim() : '';\n}\n\n/**\n * Validate SKILL.md has proper YAML frontmatter\n */\nexport function hasValidFrontmatter(content: string): boolean {\n  return content.trim().startsWith('---');\n}\n","import { findAllSkills } from '../utils/skills.js';\n\n/**\n * List all installed skills\n */\nexport function listSkills(): void {\n  console.log('Available Skills:\\n');\n\n  const skills = findAllSkills();\n\n  if (skills.length === 0) {\n    console.log('No skills installed.\\n');\n    console.log('Install skills:');\n    console.log('  openskills install anthropics/skills              # Global');\n    console.log('  openskills install anthropics/skills --project    # Project-local');\n    return;\n  }\n\n  // Group by location\n  const projectSkills = skills.filter(s => s.location === 'project');\n  const globalSkills = skills.filter(s => s.location === 'global');\n\n  if (projectSkills.length > 0) {\n    console.log('.claude/skills/ (project):');\n    for (const skill of projectSkills) {\n      console.log(`  ${skill.name.padEnd(20)}`);\n      console.log(`    ${skill.description}\\n`);\n    }\n  }\n\n  if (globalSkills.length > 0) {\n    console.log('~/.claude/skills/ (global):');\n    for (const skill of globalSkills) {\n      console.log(`  ${skill.name.padEnd(20)}`);\n      console.log(`    ${skill.description}\\n`);\n    }\n  }\n\n  console.log(`Total: ${skills.length} skill(s)`);\n}\n","import { readFileSync, readdirSync, existsSync, mkdirSync, rmSync, cpSync } from 'fs';\nimport { join, basename } from 'path';\nimport { homedir } from 'os';\nimport { execSync } from 'child_process';\nimport { hasValidFrontmatter } from '../utils/yaml.js';\nimport type { InstallOptions } from '../types.js';\n\n/**\n * Install skill from GitHub or Git URL\n */\nexport function installSkill(source: string, options: InstallOptions): void {\n  const targetDir = options.project\n    ? join(process.cwd(), '.claude/skills')\n    : join(homedir(), '.claude/skills');\n\n  const location = options.project ? 'project (.claude/skills)' : 'global (~/.claude/skills)';\n\n  console.log(`Installing from: ${source}`);\n  console.log(`Location: ${location}\\n`);\n\n  // Parse source\n  let repoUrl: string;\n  let skillSubpath: string;\n\n  if (source.startsWith('http://') || source.startsWith('https://')) {\n    repoUrl = source;\n    skillSubpath = '';\n  } else {\n    const parts = source.split('/');\n    if (parts.length === 2) {\n      repoUrl = `https://github.com/${source}`;\n      skillSubpath = '';\n    } else if (parts.length > 2) {\n      repoUrl = `https://github.com/${parts[0]}/${parts[1]}`;\n      skillSubpath = parts.slice(2).join('/');\n    } else {\n      console.error('Error: Invalid source format');\n      console.error('Expected: owner/repo or owner/repo/skill-name');\n      process.exit(1);\n    }\n  }\n\n  // Create temp directory\n  const tempDir = join(homedir(), '.openskills-temp');\n  mkdirSync(tempDir, { recursive: true });\n\n  try {\n    // Clone repository\n    console.log('Cloning repository...');\n    execSync(`git clone --depth 1 --quiet \"${repoUrl}\" \"${tempDir}/repo\"`, {\n      stdio: 'inherit',\n    });\n\n    const repoDir = join(tempDir, 'repo');\n\n    if (skillSubpath) {\n      installSpecificSkill(repoDir, skillSubpath, targetDir);\n    } else {\n      installAllSkills(repoDir, targetDir);\n    }\n  } finally {\n    // Cleanup\n    rmSync(tempDir, { recursive: true, force: true });\n  }\n\n  console.log('\\nLoad skill: openskills load <skill-name>');\n}\n\n/**\n * Install specific skill from subpath\n */\nfunction installSpecificSkill(repoDir: string, skillSubpath: string, targetDir: string): void {\n  const skillDir = join(repoDir, skillSubpath);\n  const skillMdPath = join(skillDir, 'SKILL.md');\n\n  if (!existsSync(skillMdPath)) {\n    console.error(`Error: SKILL.md not found at ${skillSubpath}`);\n    process.exit(1);\n  }\n\n  // Validate\n  const content = readFileSync(skillMdPath, 'utf-8');\n  if (!hasValidFrontmatter(content)) {\n    console.error('Error: Invalid SKILL.md (missing YAML frontmatter)');\n    process.exit(1);\n  }\n\n  const skillName = basename(skillSubpath);\n  const targetPath = join(targetDir, skillName);\n\n  mkdirSync(targetDir, { recursive: true });\n  cpSync(skillDir, targetPath, { recursive: true });\n\n  console.log(`✅ Installed: ${skillName}`);\n  console.log(`   Location: ${targetPath}`);\n}\n\n/**\n * Install all skills from repository (recursive search)\n */\nfunction installAllSkills(repoDir: string, targetDir: string): void {\n  const findSkills = (dir: string): string[] => {\n    const skills: string[] = [];\n    const entries = readdirSync(dir, { withFileTypes: true });\n\n    for (const entry of entries) {\n      const fullPath = join(dir, entry.name);\n      if (entry.isDirectory()) {\n        if (existsSync(join(fullPath, 'SKILL.md'))) {\n          skills.push(fullPath);\n        } else {\n          // Recurse into subdirectories\n          skills.push(...findSkills(fullPath));\n        }\n      }\n    }\n    return skills;\n  };\n\n  const skillDirs = findSkills(repoDir);\n\n  if (skillDirs.length === 0) {\n    console.error('Error: No SKILL.md files found in repository');\n    process.exit(1);\n  }\n\n  let installedCount = 0;\n\n  for (const skillDir of skillDirs) {\n    const skillMdPath = join(skillDir, 'SKILL.md');\n    const content = readFileSync(skillMdPath, 'utf-8');\n\n    if (!hasValidFrontmatter(content)) {\n      const skillName = basename(skillDir);\n      console.warn(`⚠️  Skipping ${skillName}: Invalid SKILL.md`);\n      continue;\n    }\n\n    const skillName = basename(skillDir);\n    const targetPath = join(targetDir, skillName);\n\n    mkdirSync(targetDir, { recursive: true });\n    cpSync(skillDir, targetPath, { recursive: true });\n\n    console.log(`✅ Installed: ${skillName}`);\n    installedCount++;\n  }\n\n  console.log(`\\n✅ Installation complete: ${installedCount} skill(s) installed`);\n}\n","import { readFileSync } from 'fs';\nimport { findSkill } from '../utils/skills.js';\n\n/**\n * Load skill to stdout (for AI agents)\n */\nexport function loadSkill(skillName: string): void {\n  const skill = findSkill(skillName);\n\n  if (!skill) {\n    console.error(`Error: Skill '${skillName}' not found`);\n    console.error('\\nSearched:');\n    console.error('  .claude/skills/ (project)');\n    console.error('  ~/.claude/skills/ (global)');\n    console.error('\\nInstall skills: openskills install owner/repo');\n    process.exit(1);\n  }\n\n  const content = readFileSync(skill.path, 'utf-8');\n\n  // Output in Claude Code format\n  console.log(`Loading: ${skillName}`);\n  console.log(`Base directory: ${skill.baseDir}`);\n  console.log('');\n  console.log(content);\n  console.log('');\n  console.log(`Skill loaded: ${skillName}`);\n}\n","import { rmSync } from 'fs';\nimport { homedir } from 'os';\nimport { findSkill } from '../utils/skills.js';\n\n/**\n * Remove installed skill\n */\nexport function removeSkill(skillName: string): void {\n  const skill = findSkill(skillName);\n\n  if (!skill) {\n    console.error(`Error: Skill '${skillName}' not found`);\n    process.exit(1);\n  }\n\n  rmSync(skill.baseDir, { recursive: true, force: true });\n\n  const location = skill.source.includes(homedir()) ? 'global' : 'project';\n  console.log(`✅ Removed: ${skillName}`);\n  console.log(`   From: ${location} (${skill.source})`);\n}\n"],"mappings":"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","names":["join","join","readFileSync","readdirSync","existsSync","join","homedir","join","homedir","existsSync","readFileSync","readdirSync","skillName","readFileSync","readFileSync","rmSync","homedir","rmSync","homedir"]}